import java.util.*;

public class Main {

    static Scanner scn = new Scanner(System.in);

    public static void main(String[] args) {
        Main m = new Main();
        BinaryTree bt = m.new BinaryTree();
        bt.sibling();
    }

    private class BinaryTree {
        private class Node {
            int data;
            Node left;
            Node right;

            Node(int data) {
                this.data = data;
            }
        }

        private Node root;
        private int size;

        public BinaryTree() {
            this.root = this.takeInput();
        }

        public Node takeInput() {
            // Read the data for the node
            int cdata = scn.nextInt();
            // Create the node with the given data
            Node child = new Node(cdata);
            this.size++;

            // Read and handle the left child
            boolean hasLeftChild = scn.nextBoolean();
            if (hasLeftChild) {
                child.left = this.takeInput();
            }

            // Read and handle the right child
            boolean hasRightChild = scn.nextBoolean();
            if (hasRightChild) {
                child.right = this.takeInput();
            }

            return child;
        }

        public void sibling() {
            this.sibling(this.root);
        }

        private void sibling(Node node) {
            if (node == null) return;

            // Print the node if it has no sibling
            if ((node.left == null && node.right != null) || (node.left != null && node.right == null)) {
                System.out.printf("%d ", node.left==null ? node.right.data:node.left.data);
            }

            // Recursively check left and right children
            sibling(node.left);
            sibling(node.right);
        }
    }
}
