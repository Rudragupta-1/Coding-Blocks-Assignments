import java.util.*;
public class Main {

	static Scanner scn = new Scanner(System.in);

	public static void main(String[] args) {
		Main m = new Main();
		BinaryTree bt = m.new BinaryTree();
		bt.levelOrderZZ();
	}

	private class BinaryTree {
		private class Node {
			int data;
			Node left;
			Node right;
		}

		private Node root;
		private int size;

		public BinaryTree() {
			this.root = this.takeInput(null, false);
		}

		public Node takeInput(Node parent, boolean ilc) {

			int cdata = scn.nextInt();
			Node child = new Node();
			child.data = cdata;
			this.size++;

			// left
			boolean hlc = scn.nextBoolean();

			if (hlc) {
				child.left = this.takeInput(child, true);
			}

			// right
			boolean hrc = scn.nextBoolean();

			if (hrc) {
				child.right = this.takeInput(child, false);
			}

			// return
			return child;
		}

		public void levelOrderZZ() {
    Queue<Node> q = new ArrayDeque<>();
    q.offer(this.root);
    boolean flag = true; 
    while (!q.isEmpty()) {
        int n = q.size();
		List<Integer> l=new ArrayList<>();
        for (int i = 0; i < n; i++) {
            Node x=q.poll();
            l.add(x.data); 
	                if (x.left != null) {
                    q.offer(x.left);
                }
                if (x.right != null) {
                    q.offer(x.right);
				} 
        }
		if(flag){
			for(int i=0;i<l.size();i++){
				System.out.printf("%d ",l.get(i));
			}
		}
		else{
			Collections.reverse(l);
			for(int i=0;i<l.size();i++){
				System.out.printf("%d ",l.get(i));
			}
		}
		l.clear();
        flag = !flag;
    }
}



	}

}
