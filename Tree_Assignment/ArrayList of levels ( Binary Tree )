import java.util.*;

public class Main {

    static Scanner scn = new Scanner(System.in);

    public static void main(String[] args) {
        Main m = new Main();
        BinaryTree bt1 = m.new BinaryTree();
        System.out.println(bt1.levelArrayList());
    }

    private class BinaryTree {
        private class Node {
            int data;
            Node left;
            Node right;
        }

        private Node root;
        private int size;

        public BinaryTree() {
            this.root = this.takeInput(null, false);
        }

        public Node takeInput(Node parent, boolean ilc) {
            int cdata = scn.nextInt();
            Node child = new Node();
            child.data = cdata;
            this.size++;

            // left
            boolean hlc = scn.nextBoolean();

            if (hlc) {
                child.left = this.takeInput(child, true);
            }

            // right
            boolean hrc = scn.nextBoolean();

            if (hrc) {
                child.right = this.takeInput(child, false);
            }

            // return
            return child;
        }

        public ArrayList<ArrayList<Integer>> levelArrayList() {
            ArrayList<ArrayList<Integer>> ll = new ArrayList<>();
            Queue<Node> q = new LinkedList<>();
            q.offer(this.root);

            while (!q.isEmpty()) {
                ArrayList<Integer> l = new ArrayList<>();
                int n = q.size();

                for (int i = 0; i < n; i++) {
                    Node x = q.poll();
                    l.add(x.data);

                    if (x.left != null) {
                        q.add(x.left);
                    }
                    if (x.right != null) {
                        q.add(x.right);
                    }
                }
                ll.add(l);
            }
            return ll;
        }
    }
}
